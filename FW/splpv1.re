/* Generated by re2c 1.3 on Sat Oct  2 20:01:46 2021 */
#line 1 "splpv1.c"
/* Generated by re2c 1.3 on Sat Oct  2 18:13:45 2021 */
/*
  Рагусский Ричард Викторович
  14 группа
*/
/*
  In case of encoding problems:
  Richard Ragusski
  Group 14
*/

/*
---------------------------------------------------------------------------------------------------------------------------
# |      STATE      |         DESCRIPTION       |           ALLOWED MESSAGES            | NEW STATE | EXAMPLE
--+-----------------+---------------------------+---------------------------------------+-----------+----------------------
1 | INIT            | initial state             | A->B     CONNECT                      |     2     |
--+-----------------+---------------------------+---------------------------------------+-----------+----------------------
2 | CONNECTING      | client is waiting for con-| A<-B     CONNECT_OK                   |     3     |
  |                 | nection approval from srv |                                       |           |
--+-----------------+---------------------------+---------------------------------------+-----------+----------------------
3 | CONNECTED       | Connection is established | A->B     GET_VER                      |     4     |
  |                 |                           |        -------------------------------+-----------+----------------------
  |                 |                           |          One of the following:        |     5     |
  |                 |                           |          - GET_DATA                   |           |
  |                 |                           |          - GET_FILE                   |           |
  |                 |                           |          - GET_COMMAND                |           |
  |                 |                           |        -------------------------------+-----------+----------------------
  |                 |                           |          GET_B64                      |     6     |
  |                 |                           |        ------------------------------------------------------------------
  |                 |                           |          DISCONNECT                   |     7     |
--+-----------------+---------------------------+---------------------------------------+-----------+----------------------
4 | WAITING_VER     | Client is waiting for     | A<-B     VERSION ver                  |     3     | VERSION 2
  |                 | server to provide version |          Where ver is an integer (>0) |           |
  |                 | information               |          value. Only a single space   |           |
  |                 |                           |          is allowed in the message    |           |
--+-----------------+---------------------------+---------------------------------------+-----------+----------------------
5 | WAITING_DATA    | Client is waiting for a   | A<-B     CMD data CMD                 |     3     | GET_DATA a GET_DATA
  |                 | response from server      |                                       |           |
  |                 |                           |          CMD - command sent by the    |           |
  |                 |                           |           client in previous message  |           |
  |                 |                           |          data - string which contains |           |
  |                 |                           |           the following allowed cha-  |           |
  |                 |                           |           racters: small latin letter,|           |
  |                 |                           |           digits and '.'              |           |
--+-----------------+---------------------------+---------------------------------------+-----------+----------------------
6 | WAITING_B64_DATA| Client is waiting for a   | A<-B     B64: data                    |     3     | B64: SGVsbG8=
  |                 | response from server.     |          where data is a base64 string|           |
  |                 |                           |          only 1 space is allowed      |           |
--+-----------------+---------------------------+---------------------------------------+-----------+----------------------
7 | DISCONNECTING   | Client is waiting for     | A<-B     DISCONNECT_OK                |     1     |
  |                 | server to close the       |                                       |           |
  |                 | connection                |                                       |           |
---------------------------------------------------------------------------------------------------------------------------

IN CASE OF INVALID MESSAGE THE STATE SHOULD BE RESET TO 1 (INIT)

 A->B: "CONNECT|GET_VER|GET_DATA|GET_FILE|GET_COMMAND|GET_B64|DISCONNECT"
 B-<A: "(CONNECT_OK|VERSION [1,9]|(GET_VER|GET_DATA|GET_FILE|GET_COMMAND|GET_B64) [a-z0-9.]+ (GET_VER|GET_DATA|GET_FILE|GET_COMMAND|GET_B64)|B64: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$|DISCONNECT_OK)"

*/
#include <string.h>
#include <ctype.h>

#include "splpv1.h"

int lexFwd(const char *YYCURSOR){
    /*!re2c
            re2c:define:YYCTYPE = char;
            re2c:define:YYMARKER = YYCURSOR;
            re2c:yyfill:enable  = 0;

            *       { return 0;}

            connect = "CONNECT" "\x00";
            connect { return 2;}

            getVer = "GET_VER" "\x00";
            getVer { return 4;}

            cmd = ("GET_DATA" "\x00")|("GET_FILE" "\x00")|("GET_COMMAND" "\x00");
            cmd { return 5;}

            "GET_B64" "\x00" { return 6;}

            "DISCONNECT" "\x00" { return 7;}


    */
}

int cmd_regex(const char *YYCURSOR){
    /*!re2c
            re2c:define:YYCTYPE = char;
            re2c:define:YYMARKER = YYCURSOR;
            re2c:yyfill:enable  = 0;

            *       { return 0;}

            base0 = [A-Za-z0-9+/];
            base64 = (base0{4})*(base0{3}"="|base0{2}"=="){0,1};

            data = "GET_DATA" " " [a-z0-9.]* " " "GET_DATA" "\x00";
            file = "GET_FILE" " " [a-z0-9.]* " " "GET_FILE" "\x00";
            command = "GET_COMMAND" " " [a-z0-9.]* " " "GET_COMMAND" "\x00";

            cmdB = ("VERSION" " " [0-9]+ "\x00")|(data|file|command)|"B64:" " " base64 "\x00"|"CONNECT_OK" "\x00";
            cmdB { return 3;}

    */
}

int disconnect_regex(const char *YYCURSOR){
    /*!re2c
            re2c:define:YYCTYPE = char;
            re2c:define:YYMARKER = YYCURSOR;
            re2c:yyfill:enable  = 0;

            *       { return 0;}

            "DISCONNECT_OK" "\x00" { return 1;}

    */
}

static int status = 1;
enum test_status validate_message( struct Message *msg )
{
    enum Direction fwd, bcw;
    fwd = A_TO_B;
    bcw = B_TO_A;

    if(msg->direction == fwd){
        int regex = lexFwd(msg->text_message);

        if(regex == 0){
            status = 1;
            return MESSAGE_INVALID;
        }
        else if(regex == 2 && status == 1){
            status = 2;
            return MESSAGE_VALID;
        }
        else if(status != 5 && status != 1) {
            if (regex == 4) {
                status = 4;
                return MESSAGE_VALID;
            }
            else if (regex == 5) {
                status = 5;
                return MESSAGE_VALID;
            }
            else if (regex == 6) {
                status = 6;
                return MESSAGE_VALID;
            }
            else if (regex == 7) {
                status = 7;
                return MESSAGE_VALID;
            }
        }
    }
    else if(msg->direction == bcw){
        int cmdRegex = cmd_regex(msg->text_message);

        if((status == 2 || status == 4 || status == 5 || status == 6) && cmdRegex == 3){
            status = 3;
            return MESSAGE_VALID;
        }
        else if(disconnect_regex(msg->text_message) == 1 && status == 7){
            status = 1;
            return MESSAGE_VALID;
        }
    }


    status = 1;
    return MESSAGE_INVALID;
}